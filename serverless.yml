# For complete reference:
# https://serverless.com/framework/docs/providers/aws/guide/serverless.yml/

service: todos

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: python3.6
  stackName: caas-${self:service}-stack-${opt:stage, self:provider.stage}
  apiName: caas-${self:service}-api-${opt:stage, self:provider.stage}

  stage: dev # Can be prod|test|dev
  region: us-west-2
  
  stackTags: # Optional CF stack tags
    app: caas
  tags: # Optional service wide tags
    app: caas

  environment:
    DYNAMODB_TABLE: caas-${self:service}-${opt:stage, self:provider.stage}
    AWS_DEFAULT_REGION: us-west-2

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  search:
    handler: todos/search.search
    name: caas-${self:service}-search-lambda-${opt:stage, self:provider.stage}
    events:
    - http:
        path: todos
        method: get
        cors: true

  create:
    handler: todos/create.create
    name: caas-${self:service}-create-lambda-${opt:stage, self:provider.stage}
    events:
    - http:
        path: todos
        method: post
        cors: true

  get:
    handler: todos/get.get
    name: caas-${self:service}-get-lambda-${opt:stage, self:provider.stage}
    events:
    - http:
        path: todos/{id}
        method: get
        cors: true

  update:
    handler: todos/update.update
    name: caas-${self:service}-update-lambda-${opt:stage, self:provider.stage}
    events:
    - http:
        path: todos/{id}
        method: put
        cors: true

  delete:
    handler: todos/delete.delete
    name: caas-${self:service}-delete-lambda-${opt:stage, self:provider.stage}
    events:
    - http:
        path: todos/{id}
        method: delete
        cors: true
        
    tags: # Function specific tags
      app: caas

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

plugins:
  - serverless-python-requirements
  - serverless-domain-manager

custom:
  pythonRequirements:
    dockerizePip: true
  stage: ${opt:stage, self:provider.stage}
  domains:
    prod: stoic.caasapis.com
    test: stoic-test.caasapis.com
    dev: stoic-dev.caasapis.com

  # Domain manager plugin settings:
  # https://github.com/amplify-education/serverless-domain-manager#known-issues
  customDomain:
    basePath: api
    domainName: ${self:custom.domains.${self:custom.stage}}
    stage: ${self:custom.stage}
    createRoute53Record: true
    certificateName: "*.caasapis.com"
